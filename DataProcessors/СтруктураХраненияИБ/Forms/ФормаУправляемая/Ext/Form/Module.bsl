
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ:	Обработка для получения структуры хранения базы данных 																		//
// ВЕРСИЯ:		14.09.2017																													//
// АВТОР:		Усевич Алексей                                         																		//
// САЙТ:		www.ausevich.ru                                       																		//
// СТРАНИЦА:	http://ausevich.ru/ekspert/poluchenie-informatsii-o-strukture-khraneniya-bazy-dannykh-v-terminakh-1s-predpriyatie-i-subd/ 	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Перем мСтруктураХранения;

/////////////////////////////////////////////////////////////////////////
//	ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ДобавитьПолеНабораДанных(НаборДанных, Имя)
	
	ПолеМетаданные = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеМетаданные.Заголовок = Имя;
	ПолеМетаданные.Поле = Имя;
	ПолеМетаданные.ПутьКДанным = Имя;
	ПолеМетаданные.ТипЗначения = Новый ОписаниеТипов("Строка");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранноеПоле(ГруппировкаКД, Имя)
	
	Элемент = ГруппировкаКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	Элемент.Использование = Истина;
	Элемент.Поле          = Новый ПолеКомпоновкиДанных(Имя);
	
КонецПроцедуры

&НаСервере 
Функция ИнициализироватьКомпоновщикНастроек(Компоновщик)
	
	мСтруктураХранения = ПолучитьИзВременногоХранилища(АдресСтруктурыИБ);
	
	ТаблицаСтруктурыБазовая = мСтруктураХранения.Скопировать(, "Метаданные,ИмяТаблицыХранения,ИмяТаблицы,Назначение");
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	// Источники данных
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	// Набор данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("СтруктураИБ", ТаблицаСтруктурыБазовая);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "СтруктураИБ";
	НаборДанных.ИмяОбъекта     = "СтруктураИБ";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	ДобавитьПолеНабораДанных(НаборДанных, "Метаданные");
	ДобавитьПолеНабораДанных(НаборДанных, "ИмяТаблицыХранения");
	ДобавитьПолеНабораДанных(НаборДанных, "ИмяТаблицы");
	ДобавитьПолеНабораДанных(НаборДанных, "Назначение");      
	
	АдресСхемыКомпоновкиДанныхИсполняемый = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	// Настройки компоновщика
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхИсполняемый);
	
	Компоновщик.Инициализировать(ИсточникНастроек);
	
	СтруктураВозвращаемыхЗначений = Новый Структура("СхемаКомпоновкиДанных, ВнешниеНаборыДанных", СхемаКомпоновкиДанных, ВнешниеНаборыДанных);
	
	Возврат СтруктураВозвращаемыхЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСервер()

	КомпоновщикНастроекИсполняемый = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	СтруктураВозвращаемыхЗначений =  ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроекИсполняемый);
	
	СхемаКомпоновкиДанных = СтруктураВозвращаемыхЗначений.СхемаКомпоновкиДанных;
	
	Если Объект.ФлагОтборы Тогда
		КомпоновщикНастроекИсполняемый.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли;
	
	ГруппировкаКД = КомпоновщикНастроекИсполняемый.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКД.Использование = Истина;
	
	ДобавитьВыбранноеПоле(ГруппировкаКД, "Метаданные");
	ДобавитьВыбранноеПоле(ГруппировкаКД, "ИмяТаблицыХранения");
	ДобавитьВыбранноеПоле(ГруппировкаКД, "ИмяТаблицы");
	ДобавитьВыбранноеПоле(ГруппировкаКД, "Назначение");	
	
	// Таблица значений
	ТаблицаРезультат = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекИсполняемый.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Процессоры вывода и компоноки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,СтруктураВозвращаемыхЗначений.ВнешниеНаборыДанных,,);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСтруктуруХранения(СброситьЗначениеТекущейСтроки = Ложь)
	
	ИмяТекущейТаблицы = Неопределено;

	Если Объект.ОтображатьДеревом Тогда
		
		ВывестиСтруктуруХраненияСервер(СброситьЗначениеТекущейСтроки);
	
		Если СброситьЗначениеТекущейСтроки И СтруктураИБДеревом.ПолучитьЭлементы().Количество() Тогда
			Элементы.СтруктураИБДеревом.ТекущаяСтрока = СтруктураИБДеревом.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		Если СброситьЗначениеТекущейСтроки И Элементы.СтруктураИБ.ТекущаяСтрока <> Неопределено Тогда
			
			НомерТекСтроки = Элементы.СтруктураИБ.ТекущаяСтрока;
			ИмяТекущейТаблицы = СтруктураИБ.НайтиПоИдентификатору(НомерТекСтроки).ИмяТаблицыХранения; 
			
			Если Лев(ИмяТекущейТаблицы, 1) = "_" Тогда
				ИмяТекущейТаблицы = СтрЗаменить(ИмяТекущейТаблицы, "_", "");
			Иначе
				ИмяТекущейТаблицы = "_" + ИмяТекущейТаблицы	
			КонецЕсли;
			
		КонецЕсли;
		
		ВывестиСтруктуруХраненияСервер(СброситьЗначениеТекущейСтроки);
		
		Если СброситьЗначениеТекущейСтроки И СтруктураИБ.Количество() Тогда
			Если ИмяТекущейТаблицы = Неопределено ИЛИ ИмяТекущейТаблицы = "" Тогда
				Элементы.СтруктураИБ.ТекущаяСтрока = СтруктураИБ[0].ПолучитьИдентификатор();
			Иначе
				
				МассивСтрок = СтруктураИБ.НайтиСтроки(Новый Структура("ИмяТаблицыХранения", ИмяТекущейТаблицы));
				Если МассивСтрок.Количество() Тогда
					Элементы.СтруктураИБ.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();	
				Иначе
					Элементы.СтруктураИБ.ТекущаяСтрока = СтруктураИБ[0].ПолучитьИдентификатор();	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере 
Процедура ВывестиСтруктуруХраненияСервер(СброситьЗначениеТекущейСтроки = Ложь)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураИБ.Очистить();
	СтруктураИБДеревом.ПолучитьЭлементы().Очистить();
	ПоляТаблицы.Очистить();
	ИндексыТаблицы.Очистить();
	СоставИндекса.Очистить();
	
	ПолучитьСтруктуруХраненияБазыДанныхСервер();
	
	ТаблицаСтруктураИБ = ПолучитьДанныеСервер();

	Если ТаблицаСтруктураИБ.Количество() Тогда
		Если Объект.ОтображатьДеревом Тогда
			ДеревоСтруктурыИБ = ОбработкаОбъект.ПреобразоватьВДерево(ТаблицаСтруктураИБ);	
			ЗначениеВРеквизитФормы(ДеревоСтруктурыИБ, "СтруктураИБДеревом");
		Иначе
			ЗначениеВРеквизитФормы(ТаблицаСтруктураИБ, "СтруктураИБ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтруктуруХраненияБазыДанныхСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	мСтруктураХранения = ПолучитьСтруктуруХраненияБазыДанных(, ОбработкаОбъект.РежимТерминов);
	
	АдресСтруктурыИБ = ПоместитьВоВременноеХранилище(мСтруктураХранения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.Отборы.Пометка = Объект.ФлагОтборы;
	Элементы.ОтображатьДеревом.Пометка = Объект.ОтображатьДеревом;
	Элементы.ПереключитьРежимТерминов.Заголовок = ?(Объект.РежимТерминов, "Переключить в термины Предприятия", "Переключить в термины СУБД");
	
	Элементы.СтруктураИБ.Видимость = НЕ Объект.ОтображатьДеревом;
	Элементы.СтруктураИБДеревом.Видимость = Объект.ОтображатьДеревом;
		
	Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Объект.ФлагОтборы;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураИБДеревомПриАктивизацииСтрокиОбщая(Элемент)
	
	Если Объект.ОтображатьДеревом Тогда
		Если Элементы.СтруктураИБДеревом.ТекущаяСтрока = Неопределено И СтруктураИБДеревом.ПолучитьЭлементы().Количество() Тогда
			Элементы.СтруктураИБДеревом.ТекущаяСтрока = СтруктураИБДеревом.ПолучитьЭлементы()[0].ПолучитьИдентификатор();	
		КонецЕсли;
	Иначе
		Если Элементы.СтруктураИБ.ТекущаяСтрока = Неопределено И СтруктураИБ.Количество() Тогда
			Элементы.СтруктураИБ.ТекущаяСтрока = СтруктураИБ[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ОтображатьДеревом Тогда
		ТекСтрока 			= Элементы.СтруктураИБДеревом.ТекущиеДанные;
	Иначе
		ТекСтрока 			= Элементы.СтруктураИБ.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		ИмяТаблицыХранения = "";
	Иначе
		ИмяТаблицыХранения = ТекСтрока.ИмяТаблицыХранения;
	КонецЕсли;
	
	СтруктураИБДеревомПриАктивизацииСтрокиОбщаяСервер(ИмяТаблицыХранения);
	
	Если ИндексыТаблицы.Количество() И Элементы.ИндексыТаблицы.ТекущиеДанные = Неопределено Тогда
		Элементы.ИндексыТаблицы.ТекущаяСтрока = ИндексыТаблицы[0].ПолучитьИдентификатор();	
	КонецЕсли;
	
	Если СоставИндекса.Количество() И Элементы.СоставИндекса.ТекущиеДанные = Неопределено Тогда
		Элементы.СоставИндекса.ТекущаяСтрока = СоставИндекса[0].ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура СтруктураИБДеревомПриАктивизацииСтрокиОбщаяСервер(ИмяТаблицыХранения)
	
	мСтруктураХранения = ПолучитьИзВременногоХранилища(АдресСтруктурыИБ);
	
	Если ИмяТаблицыХранения <> Null И ИмяТаблицыХранения <> "" Тогда
		ТекСтрокаСтруктуры  = мСтруктураХранения.Найти(ИмяТаблицыХранения, "ИмяТаблицыХранения");
		Если ТекСтрокаСтруктуры <> Неопределено Тогда
			СоставИндекса.Очистить();
			ЗначениеВРеквизитФормы(ТекСтрокаСтруктуры.Поля, "ПоляТаблицы");
			ЗначениеВРеквизитФормы(ТекСтрокаСтруктуры.Индексы, "ИндексыТаблицы");
		КонецЕсли;
	Иначе
		ПоляТаблицы.Очистить();
		ИндексыТаблицы.Очистить();
		СоставИндекса.Очистить();
	КонецЕсли;;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
//	ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();		
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сайт = "www.ausevich.ru";
	ПолучитьСтруктуруХраненияБазыДанныхСервер();
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек);
	ВывестиСтруктуруХраненияСервер();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
//	ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СайтНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("http://ausevich.ru");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимТерминов(Команда)
	
	Объект.РежимТерминов = Не Объект.РежимТерминов;
	
	ВывестиСтруктуруХранения(Истина);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДеревом(Команда)
	
	Объект.ОтображатьДеревом = Не Объект.ОтображатьДеревом;
	
	ВывестиСтруктуруХранения();		
	
	УстановитьВидимость();
	
	
КонецПроцедуры

&НаКлиенте
Процедура Отборы(Команда)
	
	Объект.ФлагОтборы = Не Объект.ФлагОтборы;
	
	//ВывестиСтруктуруХранения();		
	
	УстановитьВидимость();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	ВывестиСтруктуруХранения();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИБПриАктивизацииСтроки(Элемент)
	
	СтруктураИБДеревомПриАктивизацииСтрокиОбщая(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексыТаблицыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ИндексыТаблицы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока 		= Элементы.ИндексыТаблицы.ТекущиеДанные;
		
	СоставИндекса.Очистить();
	
	Для Каждого Элемент Из ТекСтрока.Поля Цикл
		НС = СоставИндекса.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элемент);		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИБДеревомПриАктивизацииСтроки(Элемент)
	
	СтруктураИБДеревомПриАктивизацииСтрокиОбщая(Элемент);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
//	КОД ОСНОВНОЙ ПРОГРАММЫ
